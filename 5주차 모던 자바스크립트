




// var count = 0; // 현재 카운트를 나타내는 상태

// // 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.
// function increase(n) {
//   return ++n;
// }

// // 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
// count = increase(count);
// console.log(count); // 1

// count = increase(count);
// console.log(count); // 2
// ```

// # 12-57

// ```javascript
// var count = 0; // 현재 카운트를 나타내는 상태: increase 함수에 의해 변화한다.

// // 비순수 함수
// function increase() {
//   return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.
// }

// // 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.
// increase();
// console.log(count); // 1

// increase();
// console.log(count); // 2





// // 콜백 함수를 사용하는 고차 함수 map
// var res = [1, 2, 3].map(function (item) {
//   return item * 2;
// });

// console.log(res); 

// // 콜백 함수를 사용하는 고차 함수 filter
// res = [1, 2, 3].filter(function (item) {
//   return item % 2;
// });

// console.log(res); 

// // 콜백 함수를 사용하는 고차 함수 reduce
// res = [1, 2, 3].reduce(function (acc, cur) {
//   return acc + cur;
// }, 0);

// console.log(res); 
// //업데이트가 아닌 새로운 배열생성



// // 콜백 함수를 사용한 비동기 처리
// // 1초 후에 메시지를 출력한다.
// setTimeout(function () {
//   console.log('1초 경과');
// }, 1000);




// function outer() {
//   var x = 1;

//   // 중첩 함수
//   function inner() {
//     var y = 2;
//     // 외부 함수의 변수를 참조할 수 있다.
//     console.log(x + y); // 3
//   }

//   inner();
// }

// outer();




////재귀함수로 팩토리얼 계산하기
// function factorial(n) {
//   if (n <= 1) {
//     return 1;
//   } else {
//     return n * factorial(n - 1); 
//   }
// }
// let result = factorial(5);
// console.log(result);





// function countdown(n) {
//   if (n < 0) return;
//   console.log(n);
//   countdown(n - 1); // 재귀 호출
// }

// countdown(10);




// // 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있다.
// var res = (function () {
//   var a = 3;
//   var b = 5;
//   return a * b;
// }());

// console.log(res); // 15

// // 즉시 실행 함수에도 일반 함수처럼 인수를 전달할 수 있다.
// res = (function (a, b) {
//   return a * b;
// }(3, 5));

// console.log(res); // 15




// // 익명 즉시 실행 함수
// (function () {
//   var a = 3;
//   var b = 5;
//   return a * b;
// }());




// // 기명 즉시 실행 함수
// (function foo() {
//   var a = 3;
//   var b = 5;
//   return a * b;
// }());

// foo(); // ReferenceError: foo is not defined





// function add(x, y) {
//   if (typeof x !== 'number' || typeof y !== 'number') {
//     // 매개변수를 통해 전달된 인수의 타입이 부적절한 경우 에러를 발생시킨다.
//     throw new TypeError('인수는 모두 숫자 값이어야 합니다.');
//   }

//   return x + y;
// }

// console.log(add(2));  
