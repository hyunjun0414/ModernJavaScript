// // 수퍼클래스
// class Base {
//   constructor(name) {
//     this.name = name;
//   }

//   sayHi() {
//     return `Hi! ${this.name}`;
//   }
// }

// // 서브클래스
// class Derived extends Base {
//   sayHi() {
//     // super.sayHi는 수퍼클래스의 프로토타입 메서드를 가리킨다.
//     return `${super.sayHi()}. how are you doing?`;
//   }
// }

// const base = new Base('Park');
// console.log(base.sayHi());
// const derived = new Derived('Lee');
// console.log(derived.sayHi()); // Hi! Lee. how are you doing?





// // 수퍼클래스
// class Base {
//   constructor(a, b) {
//     this.a = a;
//     this.b = b;
//   }
// }

// // 서브클래스
// class Derived extends Base {
//   // 다음과 같이 암묵적으로 constructor가 정의된다.
//   // constructor(...args) { super(...args); }
// }

// const derived = new Derived(1, 2);
// console.log(derived); // Derived {a: 1, b: 2}




// class Animal {
//   constructor(age, weight) {
//     this.age = age;
//     this.weight = weight;
//   }

//   eat() { return 'eat'; }

//   move() { return 'move'; }
// }

// // 상속을 통해 Animal 클래스를 확장한 Bird 클래스
// class Bird extends Animal {
//   fly() { return 'fly'; }
// }

// const bird = new Bird(1, 5);

// console.log(bird); // Bird {age: 1, weight: 5}
// console.log(bird instanceof Bird); // true
// console.log(bird instanceof Animal); // true

// console.log(bird.eat());  // eat
// console.log(bird.move()); // move
// console.log(bird.fly());  // fly




// class Person {
//   // private 필드 정의
//   #name = '';

//   constructor(name) {
//     this.#name = name;
//   }

//   // name은 접근자 프로퍼티다.
//   get name() {
//     // private 필드를 참조하여 trim한 다음 반환한다.
//     return this.#name.trim();
//   }
// }

// const me = new Person(' Lee ');
// console.log(me.name); // Lee





// class Person {
//   // private 필드 정의
//   #name = '';

//   constructor(name) {
//     // private 필드 참조
//     this.#name = name;
//   }
// }

// const me = new Person('Lee');

// // private 필드 #name은 클래스 외부에서 참조할 수 없다.
// //console.log(me.#name);




// class Person {
//   constructor(firstName, lastName) {
//     this.firstName = firstName;
//     this.lastName = lastName;
//   }

//   // fullName은 접근자 함수로 구성된 접근자 프로퍼티다.
//   // getter 함수
//   get fullName() {
//     return `${this.firstName} ${this.lastName}`;
//   }

//   // setter 함수
//   set fullName(name) {
//     [this.firstName, this.lastName] = name.split(' ');
//   }
// }

// const me = new Person('Ungmo', 'Lee');

// // 데이터 프로퍼티를 통한 프로퍼티 값의 참조.
// console.log(`${me.firstName} ${me.lastName}`); // Ungmo Lee

// // 접근자 프로퍼티를 통한 프로퍼티 값의 저장
// // 접근자 프로퍼티 fullName에 값을 저장하면 setter 함수가 호출된다.
// me.fullName = 'Heegun Lee';
// console.log(me); // {firstName: "Heegun", lastName: "Lee"}

// // 접근자 프로퍼티를 통한 프로퍼티 값의 참조
// // 접근자 프로퍼티 fullName에 접근하면 getter 함수가 호출된다.
// console.log(me.fullName); // Heegun Lee

// // fullName은 접근자 프로퍼티다.
// // 접근자 프로퍼티는 get, set, enumerable, configurable 프로퍼티 어트리뷰트를 갖는다.
// console.log(Object.getOwnPropertyDescriptor(Person.prototype, 'fullName'));
// // {get: ƒ, set: ƒ, enumerable: false, configurable: true}




// // me 객체의 프로토타입은 Person.prototype이다.
// Object.getPrototypeOf(me) === Person.prototype; // -> true
// me instanceof Person; // -> true

// // Person.prototype의 프로토타입은 Object.prototype이다.
// Object.getPrototypeOf(Person.prototype) === Object.prototype; // -> true
// me instanceof Object; // -> true

// // me 객체의 constructor는 Person 클래스다.
// me.constructor === Person; // -> true




// // 클래스 선언문
// class Person {
//   // 생성자
//   constructor(name) {
//     // 인스턴스 생성 및 초기화
//     this.name = name; // name 프로퍼티는 public하다.
//   }

//   // 프로토타입 메서드
//   sayHi() {
//     console.log(`Hi! My name is ${this.name}`);
//   }

//   // 정적 메서드
//   static sayHello() {
//     console.log('Hello!');
//   }
// }

// // 인스턴스 생성
// const me = new Person('Lee');

// // 인스턴스의 프로퍼티 참조
// console.log(me.name); // Lee
// // 프로토타입 메서드 (객체 이름으로)호출
// me.sayHi(); // Hi! My name is Lee
// // 정적 메서드 (클래스 이름으로)호출
// Person.sayHello(); // Hello!





// // 익명 클래스 표현식
// const Person1 = class {};
// // 기명 클래스 표현식
// const Person2 = class MyClass {};
// // 클래스 선언문
// class Person3 {}





// const counter = (function () {
//   // 카운트 상태 변수
//   let num = 0;

//   // 클로저인 메서드를 갖는 객체를 반환한다.
//   // 객체 리터럴은 스코프를 만들지 않는다.
//   // 따라서 아래 메서드들의 상위 스코프는 즉시 실행 함수의 렉시컬 환경이다.
//   return {
//     // num: 0, // 프로퍼티는 public하므로 은닉되지 않는다.
//     increase() {
//       return ++num;
//     },
//     decrease() {
//       return num > 0 ? --num : 0;
//     }
//   };
// }());

// console.log(counter.increase()); // 1
// console.log(counter.increase()); // 2

// console.log(counter.decrease()); // 1
// console.log(counter.decrease()); // 0




// // 카운트 상태 변경 함수
// const increase = (function () {
//   // 카운트 상태 변수
//   let num = 0;

//   // 클로저
//   return function () {
//     // 카운트 상태를 1만큼 증가 시킨다.
//     return ++num;
//   };
// }());

// console.log(increase()); // 1
// console.log(increase()); // 2
// console.log(increase()); // 3




// // 카운트 상태 변경 함수
// const increase = function () {
//   // 카운트 상태 변수
//   let num = 0;

//   // 카운트 상태를 1만큼 증가 시킨다.
//   return ++num;
// };

// // 이전 상태를 유지하지 못한다.
// console.log(increase()); // 1
// console.log(increase()); // 1
// console.log(increase()); // 1





// const person = {
//   name: 'Lee',
//   foo(callback) {
//     // bind 메서드로 callback 함수 내부의 this 바인딩을 전달
//     setTimeout(callback.bind(this), 100);
//   }
// };

// person.foo(function () {
//   console.log(`Hi! my name is ${this.name}.`); // Hi! my name is Lee.
// });




// var value = 1;

// const obj = {
//   value: 100,
//   foo() {
//     // 화살표 함수 내부의 this는 상위 스코프의 this를 가리킨다.
//     setTimeout(() => console.log(this.value), 100); // 100
//   }
// };
// obj.foo();
