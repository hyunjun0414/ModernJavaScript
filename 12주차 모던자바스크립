// // async-await 를 이용한 비동기 함수 실행 제어( reject 에러)
// // async는 함수앞에 붙히고
// // await는 Promise 객체 앞에 붙힌다

// function fAsync1() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:1");
//       console.log("Promise:2");
//       reject("error msg");
//       return;
//       console.log("Promise:3");
//       resolve("done!!!");
//   });
// }
// function fAsync2() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:4");
//       console.log("Promise:5");        
//       resolve("2 done!!!");
//   });
// }
// function fAsync3() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:6");
//       console.log("Promise:7");        
//       resolve("3 done!!!");
//   });
// }
// async function taskAsync()
// {
//   try{
//       let result = await fAsync1();
//       console.log("Promise run : ", result);
//       result = await fAsync2();
//       console.log("2 Promise run : ", result);    
//       result = await fAsync3();
//       console.log("3 Promise run : ", result);  
//       console.log(" all done!");
//   }catch( err )
//   {
//       console.log("error:", err);
//   }
// }
// taskAsync();




// // Promise 객체를 반환하는 함수()
// function fAsync() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:1");
//       console.log("Promise:2");
//       console.log("Promise:3");
//       resolve("done!!!");
//   });
// }
// function fAsync2() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:4");
//       console.log("Promise:5");        
//       resolve("2 done!!!");
//   });
// }
// function fAsync3() {
//   return new Promise((resolve, reject)=>{
//       console.log("Promise:6");
//       console.log("Promise:7");        
//       resolve("3 done!!!");
//   });
// }

// fAsync().then((result)=>{
//   console.log("Promise run : ", result);
//   return fAsync2();
// }).then((result)=>{
//   console.log("2 Promise run : ", result);
//   const pro = fAsync3();
//   return pro;
// }).then((result)=>{
//   console.log("3 Promise run : ", result);  
//   console.log(" all done!");
// }).catch((err)=>{
//   console.log("err Promise run : ", err);
// });





// // Promise 객체의 resolve, reject 처리
// const pro = new Promise((resolve, reject)=>{
//   console.log("Promise:1");
//   //if(에러가 있다면..)
//   reject("error msg");
//   return;
//   console.log("Promise:2");

//   console.log("Promise:3");

//   resolve("done!!!");
// });

// pro.then((result)=>{
//   console.log("Promise run : ", result);
// }).catch((err)=>{
//   console.log("Promise run : ", err);
// });





// // Promise 객체 생성
// new Promise((resolve, reject)=>{
//   console.log("Promise:1");
//   console.log("Promise:2");
//   console.log("Promise:3");    
// });





// // setTimeout()을 이용한 긴 작업 구현과 콜백 Hell
// function longTask1(num,  cb )
// {
//     console.log('start longtask:', num);

//     setTimeout(()=>{        
//         cb(num);
//     }, Math.floor(Math.random()*5000)+1000);
// }
// function longTask2(num,  cb )
// {
//     console.log('start longtask:', num);

//     setTimeout(()=>{        
//         cb(num);
//     }, Math.floor(Math.random()*5000)+1000);
// }
// function longTask3(num,  cb )
// {
//     console.log('start longtask:', num);

//     setTimeout(()=>{        
//         cb(num);
//     }, Math.floor(Math.random()*5000)+1000);
// }

// longTask1( 1, (r)=>{console.log('end longtask:', r); } );
// longTask2( 2, (r)=>{
//     console.log('end longtask:', r); 
//     //if(오류 없어?)
//     longTask3( 3, (r)=>{
//         console.log('end longtask:', r); 
//         //if(오류 없어?)
//         // 다음 작업......................
//     } );        
// } );





// // 콜백함수를 이용한 find()   예제
// //////// server code
// function findServer(lt, key, cb) //callbackfunction
// {
//     for(let i = 0 ; i < lt.length; ++i)
//         if( key == lt[i])
//         {
//             //callback
//             cb(i, key);
//             return;
//         }
// }
// ////////// client code
// function handleClient(i,key)
// {
//     console.log("key : ", i, key);
// }
// findServer([15,17,23,50,60], 23, handleClient);
// findServer([15,17,23,50,60], 23, (i,key)=>{console.log("data:",i,key);});  //callback function





// // Rest 프로퍼티
// const { x, ...rest } = { x: 1, y: 2, z: 3 };
// console.log(x, rest); // 1 { y: 2, z: 3 }





// const user = {
//   name: 'Lee',
//   address: {
//     zipCode: '03068',
//     city: 'Seoul'
//   }
// };

// // address 프로퍼티 키로 객체를 추출하고 이 객체의 city 프로퍼티 키로 값을 추출한다.
// const { address: { city } } = user;
// console.log(city); // 'Seoul'




// const arr = [10,20,30,40,50];
// const[a1, a2] = arr;
// console.log(a1,a2);

// const o1 = {firstName:'gildong',lastName:'Hong'};
// console.log(o1.firstName,o1.lastName);

// const{firstName, lastName} = o1;
// console.log(firstName,lastName);

// const{firstName:a, lastName:b} = o1;
// console.log(a,b);






// // 기본값
// const [a, b, c = 3] = [1, 2];
// console.log(a, b, c); // 1 2 3

// // 기본값보다 할당된 값이 우선한다.
// const [e, f = 10, g = 3] = [1, 2];
// console.log(e, f, g); // 1 2 3





// const arr = [1, 2, 3];

// // ES6 배열 디스트럭처링 할당
// // 변수 one, two, three를 선언하고 배열 arr을 디스트럭처링하여 할당한다.
// // 이때 할당 기준은 배열의 인덱스다.
// const [one, two, three] = arr;

// console.log(one, two, three); // 1 2 3



//배열 디스트럭처링 할당문법
